version: '3'

vars:
  LANG: en
  CUSTOM: custom
  KEY: service-account.json
  CONF: conf.yaml
  VERBOSE: -v
  MIN_COVERAGE: 60

tasks:
  setlang:
    cmds: # TODO: how shoild we handle windows?
      - ln -sf ../localization/"{{.LANG}}"/lang.go internal/
      - ln -sf localization/"{{.LANG}}"/conf.yaml ./

  setcustom:
    cmds: # TODO: how shoild we handle windows?
      - ln -sf ../customization/"{{.CUSTOM}}".go internal/custom.go

  build-lin:
    cmds:
      - GOOS=linux GOARCH=amd64 go build -o build/firemage ./internal
    sources:
      - internal/**/*.go
    generates:
      - build/firemage

  build-osx:
    cmds:
      - GOOS=darwin GOARCH=amd64 go build -o build/firemage ./internal
    sources:
      - internal/**/*.go
    generates:
      - build/firemage.exe

  build-win:
    cmds:
      - GOOS=windows GOARCH=amd64 go build -o build/firemage.exe ./internal
    sources:
      - internal/**/*.go
    generates:
      - build/firemage.exe

  build:
    cmds:
      - cmd: go build -o build/firemage ./internal
        platforms: [linux, darwin]
      - cmd: go build -o build/firemage.exe ./internal
        platforms: [windows]

  debug:
    cmds:
      - go run ./internal -k {{.KEY}} -c {{.CONF}} {{.VERBOSE}} {{.CLI_ARGS}}

  test:
    cmds:
      - echo "testing .."
      - go test -coverprofile c.cov.tmp -covermode=count ./internal/... -v -p 1 -vet off
      - cat c.cov.tmp | rg -ve "(colfer\.go)|(tpltc\.go)" > c.cov
      - rm c.cov.tmp
      - go tool cover -func c.cov | grep total | awk '{cov=substr($3, 1, length($3)-1)+0.0; print cov}' > coverage.txt
      - cat coverage.txt | awk '{min_cov={{.MIN_COVERAGE}} + 0;cov=$1;print "COVERAGE " cov " ?>= " min_cov; if (cov < min_cov) {print "Low COVERAGE cov < min_cov"; exit 1};print "Good coverage >= " min_cov}'

  cover:
    cmds:
      - go tool cover -o cov.html -html=c.cov; sed -i 's/black/whitesmoke/g' cov.html; chromium cov.html

